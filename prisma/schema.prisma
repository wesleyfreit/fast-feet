// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum DeliveryStatus {
  WAITING_PICK_UP
  PICKED_UP
  DELIVERED
  RETURNED
}

model User {
  id        String    @id @default(cuid())
  name      String
  cpf       String    @unique
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  deliveries Delivery[]

  @@map("users")
}

model Recipient {
  id        String    @id @default(cuid())
  name      String
  cpf       String    @unique
  email     String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  deliveries Delivery[]

  @@map("recipients")
}

model Delivery {
  id            String         @id @default(cuid())
  status        DeliveryStatus @default(WAITING_PICK_UP)
  photoProof    String?        @map("photo_proof")
  street        String
  neighborhood  String
  number        String
  city          String
  state         String
  zipCode       String
  complement    String?
  recipientId   String         @map("recipient_id")
  deliveryManId String?        @map("delivery_man_id")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime?      @updatedAt @map("updated_at")

  recipient Recipient @relation(fields: [recipientId], references: [id])
  user      User?     @relation(fields: [deliveryManId], references: [id])

  @@map("deliveries")
}
